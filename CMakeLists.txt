################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
project(sprk)
enable_language(C)
enable_testing()

set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

########################################################################
# determine version
########################################################################
foreach(which MAJOR MINOR PATCH)
    file(
        STRINGS
        "${SOURCE_DIR}/include/sprk_library.h"
        SPRK_VERSION_STRING REGEX
        "#define SPRK_VERSION_${which}"
    )
    string(
        REGEX MATCH
        "#define SPRK_VERSION_${which} ([0-9_]+)"
        SPRK_REGEX_MATCH
        "${SPRK_VERSION_STRING}"
    )
    if (NOT SPRK_REGEX_MATCH)
        message(
            FATAL_ERROR
            "failed to parse SPRK_VERSION_${which} from sprk.h"
        )
    endif()
    set(SPRK_${which}_VERSION ${CMAKE_MATCH_1})
endforeach(which)

set(
    SPRK_VERSION
    ${SPRK_MAJOR_VERSION}.${SPRK_MINOR_VERSION}.${SPRK_PATCH_VERSION}
)

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(WRITE "${SOURCE_DIR}/src/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${SOURCE_DIR}/src/platform.h.in" "${SOURCE_DIR}/src/platform.h")

#The MSVC C compiler is too out of date,
#so the sources have to be compiled as c++
if (MSVC)
    enable_language(CXX)
    file(GLOB sources "${SOURCE_DIR}/src/*.c")
    set_source_files_properties(
        ${sources}
        PROPERTIES LANGUAGE CXX
    )
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES -luuid)
endif()

list(APPEND CMAKE_MODULE_PATH "${SOURCE_DIR}")
set(OPTIONAL_LIBRARIES)

########################################################################
# LIBSODIUM dependency
########################################################################
find_package(libsodium REQUIRED)
IF (LIBSODIUM_FOUND)
    include_directories(${LIBSODIUM_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${LIBSODIUM_LIBRARIES})
ELSE (LIBSODIUM_FOUND)
    message( FATAL_ERROR "libsodium not found." )
ENDIF (LIBSODIUM_FOUND)

########################################################################
# LIBZMQ dependency
########################################################################
find_package(libzmq REQUIRED)
IF (LIBZMQ_FOUND)
    include_directories(${LIBZMQ_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${LIBZMQ_LIBRARIES})
ELSE (LIBZMQ_FOUND)
    message( FATAL_ERROR "libzmq not found." )
ENDIF (LIBZMQ_FOUND)

########################################################################
# CZMQ dependency
########################################################################
find_package(czmq REQUIRED)
IF (CZMQ_FOUND)
    include_directories(${CZMQ_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${CZMQ_LIBRARIES})
ELSE (CZMQ_FOUND)
    message( FATAL_ERROR "czmq not found." )
ENDIF (CZMQ_FOUND)

########################################################################
# includes
########################################################################
set (sprk_headers
    include/sprk_library.h
    include/sprk.h
    include/sprk_ctx.h
    include/sprk_dataset.h
    include/sprk_msg.h
    src/block.h
    src/block_data.h
    src/block_manager.h
    src/broker.h
    src/descriptor.h
    src/transform.h
    src/executor.h
    src/block_worker.h
)
source_group ("Header Files" FILES ${sprk_headers})
install(FILES ${sprk_headers} DESTINATION include)

########################################################################
# library
########################################################################
include_directories("${SOURCE_DIR}/src" "${SOURCE_DIR}/include")
set (sprk_sources
    src/sprk_ctx.c
    src/sprk_dataset.c
    src/block.c
    src/block_data.c
    src/block_manager.c
    src/broker.c
    src/descriptor.c
    src/transform.c
    src/sprk_msg.c
    src/executor.c
    src/block_worker.c
)
source_group("Source Files" FILES ${sprk_sources})
if (NOT DEFINED BUILD_SHARED_LIBS)
    SET(BUILD_SHARED_LIBS ON)
endif()
add_library(sprk ${sprk_sources})
set_target_properties(sprk
    PROPERTIES DEFINE_SYMBOL "LIBSPRK_EXPORTS"
)
set_target_properties(sprk
    PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
target_link_libraries(sprk
    ${ZEROMQ_LIBRARIES} ${MORE_LIBRARIES}
)

install(TARGETS sprk
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin              # .dll file
)

########################################################################
# pkgconfig
########################################################################
set(VERSION "${SPRK_VERSION}")
set(prefix "${CMAKE_INSTALL_PREFIX}")
set(exec_prefix "\${prefix}")
set(libdir "\${prefix}/lib${LIB_SUFFIX}")
set(includedir "\${prefix}/include")
configure_file(
    "${SOURCE_DIR}/src/libsprk.pc.in"
    "${SOURCE_DIR}/src/libsprk.pc"
@ONLY)

install(
    FILES "${SOURCE_DIR}/src/libsprk.pc"
    DESTINATION "lib${LIB_SUFFIX}/pkgconfig"
)

########################################################################
# executables
########################################################################
add_executable(
    sprk_broker
    "${SOURCE_DIR}/src/sprk_broker.c"
)
target_link_libraries(
    sprk_broker
    sprk
    ${LIBSODIUM_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    sprk_broker
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
add_executable(
    sprk_executor
    "${SOURCE_DIR}/src/sprk_executor.c"
)
target_link_libraries(
    sprk_executor
    sprk
    ${LIBSODIUM_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    sprk_executor
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
add_executable(
    inprocess
    "${SOURCE_DIR}/src/inprocess.c"
)
target_link_libraries(
    inprocess
    sprk
    ${LIBSODIUM_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    inprocess
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
add_executable(
    outprocess
    "${SOURCE_DIR}/src/outprocess.c"
)
target_link_libraries(
    outprocess
    sprk
    ${LIBSODIUM_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    outprocess
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
add_executable(
    gendata
    "${SOURCE_DIR}/src/gendata.c"
)
target_link_libraries(
    gendata
    sprk
    ${LIBSODIUM_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    gendata
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
add_executable(
    topology
    "${SOURCE_DIR}/src/topology.c"
)
target_link_libraries(
    topology
    sprk
    ${LIBSODIUM_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    topology
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
add_executable(
    sprk_selftest
    "${SOURCE_DIR}/src/sprk_selftest.c"
)
target_link_libraries(
    sprk_selftest
    sprk
    ${LIBSODIUM_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    sprk_selftest
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)

########################################################################
# tests
########################################################################
set(CLASSTEST_TIMEOUT 5 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 20 CACHE STRING "Timout of the total testsuite")

set(TEST_CLASSES
    sprk_ctx
    sprk_dataset
    block
    block_data
    block_manager
    broker
    descriptor
    transform
    sprk_msg
    executor
    block_worker
)

foreach(TEST_CLASS ${TEST_CLASSES})
    add_test(
        NAME ${TEST_CLASS}
        COMMAND sprk_selftest --continue --verbose --test ${TEST_CLASS}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT}
    )
endforeach(TEST_CLASS)


########################################################################
# summary
########################################################################
message(STATUS "version: ${SPRK_VERSION}")
message(STATUS "install: ${CMAKE_INSTALL_PREFIX}")

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
