################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

from __future__ import print_function
import os, sys
from ctypes import *
from ctypes.util import find_library

# sprk
try:
    # If LD_LIBRARY_PATH or your OSs equivalent is set, this is the only way to
    # load the library.  If we use find_library below, we get the wrong result.
    if os.name == 'posix':
        if sys.platform == 'darwin':
            lib = cdll.LoadLibrary('libsprk.0.dylib')
        else:
            lib = cdll.LoadLibrary("libsprk.so.0")
    elif os.name == 'nt':
        lib = cdll.LoadLibrary('libsprk.dll')
except OSError:
    libpath = find_library("sprk")
    if not libpath:
        raise ImportError("Unable to find libsprk")
    lib = cdll.LoadLibrary(libpath)

class sprk_ctx_t(Structure):
    pass # Empty - only for type checking
sprk_ctx_p = POINTER(sprk_ctx_t)

class number_t(Structure):
    pass # Empty - only for type checking
number_p = POINTER(number_t)

class sprk_dataset_t(Structure):
    pass # Empty - only for type checking
sprk_dataset_p = POINTER(sprk_dataset_t)


# sprk_ctx
lib.sprk_ctx_new.restype = sprk_ctx_p
lib.sprk_ctx_new.argtypes = [c_char_p]
lib.sprk_ctx_destroy.restype = None
lib.sprk_ctx_destroy.argtypes = [POINTER(sprk_ctx_p)]
lib.sprk_ctx_load_dense.restype = sprk_dataset_p
lib.sprk_ctx_load_dense.argtypes = [sprk_ctx_p, c_char_p, number_p]
lib.sprk_ctx_test.restype = None
lib.sprk_ctx_test.argtypes = [c_bool]

class SprkCtx(object):
    """sprk context; public API to work with distributed datasets."""

    allow_destruct = False
    def __init__(self, *args):
        """Creates a new sprk context which facilitates communication with
known executors."""
        if len(args) == 2 and type(args[0]) is c_void_p and isinstance(args[1], bool):
            self._as_parameter_ = cast(args[0], sprk_ctx_p) # Conversion from raw type to binding
            self.allow_destruct = args[1] # This is a 'fresh' value, owned by us
        elif len(args) == 2 and type(args[0]) is sprk_ctx_p and isinstance(args[1], bool):
            self._as_parameter_ = args[0] # Conversion from raw type to binding
            self.allow_destruct = args[1] # This is a 'fresh' value, owned by us
        else:
            assert(len(args) == 1)
            self._as_parameter_ = lib.sprk_ctx_new(args[0]) # Creation of new raw type
            self.allow_destruct = True

    def __del__(self):
        """Destroy the sprk_ctx."""
        if self.allow_destruct:
            lib.sprk_ctx_destroy(byref(self._as_parameter_))

    def __bool__(self):
        "Determine whether the object is valid by converting to boolean" # Python 3
        return self._as_parameter_.__bool__()

    def __nonzero__(self):
        "Determine whether the object is valid by converting to boolean" # Python 2
        return self._as_parameter_.__nonzero__()

    def load_dense(self, path_list, row_size):
        """Loads data located in given paths distributed across executors."""
        return SprkDataset(lib.sprk_ctx_load_dense(self._as_parameter_, path_list, row_size), False)

    @staticmethod
    def test(verbose):
        """Self test of this class."""
        return lib.sprk_ctx_test(verbose)


# sprk_dataset
lib.sprk_dataset_destroy.restype = None
lib.sprk_dataset_destroy.argtypes = [POINTER(sprk_dataset_p)]
lib.sprk_dataset_checkpoint.restype = None
lib.sprk_dataset_checkpoint.argtypes = [sprk_dataset_p]
lib.sprk_dataset_mul.restype = None
lib.sprk_dataset_mul.argtypes = [sprk_dataset_p, c_float]
lib.sprk_dataset_sum.restype = c_float
lib.sprk_dataset_sum.argtypes = [sprk_dataset_p]
lib.sprk_dataset_test.restype = None
lib.sprk_dataset_test.argtypes = [c_bool]

class SprkDataset(object):
    """Distributed dataset with fixed set of operations and transformations."""

    allow_destruct = False
    def __del__(self):
        """Destroy the sprk_dataset."""
        if self.allow_destruct:
            lib.sprk_dataset_destroy(byref(self._as_parameter_))

    def __bool__(self):
        "Determine whether the object is valid by converting to boolean" # Python 3
        return self._as_parameter_.__bool__()

    def __nonzero__(self):
        "Determine whether the object is valid by converting to boolean" # Python 2
        return self._as_parameter_.__nonzero__()

    def checkpoint(self):
        """Checkpoints all blocks and their transformations across executors."""
        return lib.sprk_dataset_checkpoint(self._as_parameter_)

    def mul(self, multiplier):
        """Multiplies all values by the multiplier."""
        return lib.sprk_dataset_mul(self._as_parameter_, multiplier)

    def sum(self):
        """Calculates the sum of all values in the dataset."""
        return lib.sprk_dataset_sum(self._as_parameter_)

    @staticmethod
    def test(verbose):
        """Self test of this class."""
        return lib.sprk_dataset_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
