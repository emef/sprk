/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/

#ifndef QML_BLOCK_H
#define QML_BLOCK_H

#include <QtQml>

#include <sprk.h>
#include "qml_sprk_plugin.h"


class QmlBlock : public QObject
{
    Q_OBJECT
    Q_PROPERTY(bool isNULL READ isNULL)
    
public:
    block_t *self;
    
    QmlBlock() { self = NULL; }
    bool isNULL() { return self == NULL; }
    
    static QObject* qmlAttachedProperties(QObject* object); // defined in QmlBlock.cpp
    
public slots:
    //  Queue a transformation to be applied to this block.
    void queueTransform (transformation_t *transform);
};

class QmlBlockAttached : public QObject
{
    Q_OBJECT
    QObject* m_attached;
    
public:
    QmlBlockAttached (QObject* attached) {
        Q_UNUSED (attached);
    };
    
public slots:
    //  Self test of this class.
    void test (bool verbose);

    //  Creates a new block
    QmlBlock *construct (const QString &blockId, QmlDescriptor *descriptor, zlist_t *appliedTransforms);

    //  Destroy the block.
    void destruct (QmlBlock *qmlSelf);
};


QML_DECLARE_TYPEINFO(QmlBlock, QML_HAS_ATTACHED_PROPERTIES)

#endif
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
