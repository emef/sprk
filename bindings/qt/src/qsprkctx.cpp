/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/

#include "qsprk.h"

///
//  Copy-construct to return the proper wrapped c types
QSprkCtx::QSprkCtx (sprk_ctx_t *self, QObject *qObjParent) : QObject (qObjParent)
{
    this->self = self;
}


///
//  Creates a new sprk context which facilitates communication with
//  known executors.                                               
QSprkCtx::QSprkCtx (const QString &brokerUri, QObject *qObjParent) : QObject (qObjParent)
{
    this->self = sprk_ctx_new (brokerUri.toUtf8().data());
}

///
//  Destroy the sprk_ctx.
QSprkCtx::~QSprkCtx ()
{
    sprk_ctx_destroy (&self);
}

///
//  Loads data located in given paths distributed across executors.
QSprkDataset * QSprkCtx::loadDense (const QString &pathList, quint32 rowSize)
{
    QSprkDataset *rv = new QSprkDataset (sprk_ctx_load_dense (self, pathList.toUtf8().data(), (uint32_t) rowSize));
    return rv;
}

///
//  Self test of this class.
void QSprkCtx::test (bool verbose)
{
    sprk_ctx_test (verbose);
    
}
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
